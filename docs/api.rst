========================
sfftkrw.api
========================

This module defines a user-friendly adapter API (compared to the one generated by
`generateDS <http://www.davekuhlman.org/generateDS.html>`_).
It is designed to fulfill several requirements:

-   allow multiple versions of ``generateDS`` APIs to exist for the same adapter;

-   implement more convenient ways of working with the classes of the API;

-   easily integrate new EMDB-SFF entities into the API;

-   decouple the file format from the data model: most classes in this adapter implement methods to handle conversion
    to non-XML formats (XML is the only format that `generateDS <http://www.davekuhlman.org/generateDS.html>`_ writes
    to)

Here is an example of how the :py:class:`SFFSegmentation` class is defined using these classes (details omitted for brevity):

.. code:: python

    from .base import SFFType, SFFAttribute

    class SFFSegmentation(SFFType):
        """Adapter class to make using the output of ``generateDS`` easier to use"""
        gds_type = sff.segmentation
        gds_tag_name = "segmentation"
        repr_string = "SFFSegmentation(...)"

        # attributes
        name = SFFAttribute('name', required=True)
        version = SFFAttribute('version')
        software_list = SFFAttribute('software_list', sff_type=SFFSoftwareList)
        primary_descriptor = SFFAttribute('primary_descriptor')
        transform_list = SFFAttribute('transform_list', sff_type=SFFTransformList)
        bounding_box = SFFAttribute('bounding_box', sff_type=SFFBoundingBox)
        global_external_references = SFFAttribute('global_external_references', sff_type=SFFGlobalExternalReferences)
        segment_list = SFFAttribute('segment_list', sff_type=SFFSegmentList)
        lattice_list = SFFAttribute('lattice_list', sff_type=SFFLatticeList)
        details = SFFAttribute('details')

In the above example, the :py:class:`SFFSegmentation` class inherits from :py:class:`SFFType`; :py:class:`SFFType`
uses the first three attributes (``gds_type``, ``gds_tag_name`` and ``repr_string``) to configure the user class
:py:class:`SFFSegmentation`. The API user can now exploit :py:class:`SFFSegmentation` without any need to know the
underlying implementation while benefiting from the aforementioned facilities:

.. code:: python

    from sfftkrw.api import SFFSegmentation

    # to create a new empty EMDB-SFF segmentation object
    # provide the only required attribute
    seg = SFFSegmentation(name='my name')
    seg.to_file('file.sff') # export

    # to read an XML-, HDF5- or JSON-formatted file, respectively
    seg = SFFSegmentation('file.sff')
    seg = SFFSegmentation('file.hff')
    seg = SFFSegmentation('file.json')

The attributes (``name``, ``version``, etc.) are all instances of :py:class:`SFFAttribute`, which takes the name (first
positional argument) and an optional keyword argument ``sff_type`` denoting the class of the attribute. In the above
example, the ``software_list`` attribute will be of type :py:class:`SFFSoftwareList`.

To learn more about the core classes please refer to :doc:`base`.

.. automodule:: sfftkrw.api
    :member-order: alphabetical

.. toctree::
    :maxdepth: 2


:py:class:`SFFSegmentation` class
=====================================

.. autoclass:: SFFSegmentation(name=None, software_list=None, primary_descriptor=None, details=None, transform_list=None, bounding_box=None, segment_list=None, lattice_list=None)
    :members:
    :inherited-members:
    :show-inheritance:

:py:class:`SFFSoftwareList` class
=====================================

.. autoclass:: SFFSoftwareList()
    :members:
    :show-inheritance:


:py:class:`SFFSoftware` class
=====================================

.. autoclass:: SFFSoftware(name=None, version=None, processing_details=None)
    :members:
    :show-inheritance:

:py:class:`SFFTransformList` class
==============================================

.. autoclass:: SFFTransformList()
    :members:
    :show-inheritance:

:py:class:`SFFTransformationMatrix` class
==============================================

.. autoclass:: SFFTransformationMatrix(id=None, rows=None, cols=None, data=None)
    :members:
    :show-inheritance:

:py:class:`SFFBoundingBox` class
=====================================

.. autoclass:: SFFBoundingBox(xmin=0.0, xmax=None, ymin=0.0, ymax=None, zmin=0.0, zmax=None)
    :members:
    :show-inheritance:

:py:class:`SFFGlobalExternalReferenceList` class
=======================================================

.. autoclass:: SFFGlobalExternalReferenceList()
    :members:
    :show-inheritance:

:py:class:`SFFExternalReferenceList` class
=======================================================

.. autoclass:: SFFExternalReferenceList()
    :members:
    :show-inheritance:

:py:class:`SFFExternalReference` class
==============================================

.. autoclass:: SFFExternalReference(id=None, resource=None, url=None, accession=None, label=None, description=None)
    :members:
    :show-inheritance:

:py:class:`SFFSegmentList` class
=====================================

.. autoclass:: SFFSegmentList()
    :members:
    :show-inheritance:

:py:class:`SFFSegment` class
=====================================

.. autoclass:: SFFSegment(id=None, biological_annotation=None, colour=None, mesh_list=None, three_d_volume=None, shape_primitive_list=None)
    :members:
    :show-inheritance:

:py:class:`SFFBiologicalAnnotation` class
==============================================

.. autoclass:: SFFBiologicalAnnotation(name=None, description=None, external_references=None)
    :members:
    :show-inheritance:

:py:class:`SFFRGBA` class
=====================================

.. autoclass:: SFFRGBA(red=None, green=None, blue=None, alpha=1.0, random_colour=False)
    :members:
    :show-inheritance:


:py:class:`SFFVertices` class
=====================================

.. autoclass:: SFFVertices(num_vertices=None, mode="float32", endianness="little", data=None)
    :members:
    :show-inheritance:

:py:class:`SFFNormals` class
=====================================

.. autoclass:: SFFNormals(num_normals=None, mode="float32", endianness="little", data=None)
    :members:
    :show-inheritance:

:py:class:`SFFTriangles` class
=====================================

.. autoclass:: SFFTriangles(num_triangles=None, mode="uint32", endianness="little", data=None)
    :members:
    :show-inheritance:


:py:class:`SFFMeshList` class
=====================================

.. autoclass:: SFFMeshList()
    :members:
    :show-inheritance:

:py:class:`SFFMesh` class
=====================================

.. autoclass:: SFFMesh(id=None, vertices=None, normals=None, triangles=None, transform_id=None)
    :members:
    :show-inheritance:


:py:class:`SFFThreeDVolume` class
=====================================

.. autoclass:: SFFThreeDVolume(lattice_id=None, value=None, transform_id=None)
    :members:
    :show-inheritance:

:py:class:`SFFLatticeList` class
=====================================

.. autoclass:: SFFLatticeList()
    :members:
    :show-inheritance:

:py:class:`SFFLattice` class
=====================================

.. autoclass:: SFFLattice(id=None, mode=None, endianness=None, size=None, start=None, data=None)
    :members:
    :show-inheritance:

:py:class:`SFFVolumeStructure` class
==============================================

.. autoclass:: SFFVolumeStructure(rows=None, cols=None, sections=None)
    :members:
    :show-inheritance:

:py:class:`SFFVolumeIndex` class
=====================================

.. autoclass:: SFFVolumeIndex(rows=None, cols=None, sections=None)
    :members:
    :show-inheritance:

:py:class:`SFFShapePrimitiveList` class
==============================================

.. autoclass:: SFFShapePrimitiveList()
    :members:
    :show-inheritance:

:py:class:`SFFShape` class
=====================================

.. autoclass:: SFFShape(id=None, transform_id=None, attribute=None)
    :members:
    :show-inheritance:

:py:class:`SFFCone` class
=====================================

.. autoclass:: SFFCone(id=None, height=None, bottom_radius=None, transform_id=None, attribute=None)
    :members:
    :show-inheritance:

:py:class:`SFFCuboid` class
=====================================

.. autoclass:: SFFCuboid(id=None, x=None, y=None, z=None, transform_id=None, attribute=None)
    :members:
    :show-inheritance:

:py:class:`SFFCylinder` class
=====================================

.. autoclass:: SFFCylinder(id=None, height=None, diameter=None, transform_id=None, attribute=None)
    :members:
    :show-inheritance:

:py:class:`SFFEllipsoid` class
=====================================

.. autoclass:: SFFEllipsoid(id=None, x=None, y=None, z=None, transform_id=None, attribute=None)
    :members:
    :show-inheritance:

















