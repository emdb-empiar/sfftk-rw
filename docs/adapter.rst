========================
sfftkrw.schema.adapter
========================

This module defines an usable adapter API to the one generated by
`generateDS <http://www.davekuhlman.org/generateDS.html>`_ API. It is designed to fulfill several requirements:

-   allow multiple versions of generateDS APIs to exist for the same adapter;

-   implement more convenient ways of working with the classes of the API;

-   easily integrate new EMDB-SFF entities into the API;

-   decouple the file format from the data model: most classes in this adapter implement methods to handle conversion
    to non-XML formats (XML is the only format that `generateDS <http://www.davekuhlman.org/generateDS.html>`_ writes
    to)

Here is an example of how the :py:class:`SFFSegmentation` class is defined using these classes:

.. code:: python

    class SFFSegmentation(SFFType):
        \"\"\"Adapter class to make using the output of ``generateDS`` easier to use\"\"\"
        gds_type = sff.segmentation
        repr_string = "SFFSegmentation(...)"

        # attributes
        name = SFFAttribute('name')
        version = SFFAttribute('version')
        software = SFFAttribute('software', sff_type=SFFSoftware)
        primary_descriptor = SFFAttribute('primaryDescriptor')
        transforms = SFFAttribute('transformList', sff_type=SFFTransformList)
        bounding_box = SFFAttribute('boundingBox', sff_type=SFFBoundingBox)
        global_external_references = SFFAttribute('global_external_references', sff_type=SFFGlobalExternalReferences)
        segments = SFFAttribute('segmentList', sff_type=SFFSegmentList)
        details = SFFAttribute('details')

In the above example, the :py:class:`SFFSegmentation` class inherits from :py:class:`SFFType` which uses the first
three attributes (``gds_type``, ``gds_tag_name`` and ``repr_string``) to configure the user-level :py:class:`SFFSegmentation` class
class. A user can now use :py:class:`SFFSegmentation` normally:

.. code:: python

    from sfftkrw.schema import SFFSegmentation

    # to create a new empty EMDB-SFF segmentation object
    seg = SFFSegmentation()

    # to open an XML-, HDF5- or JSON-formatted file, respectively
    seg = SFFSegmentation('file.sff')
    seg = SFFSegmentation('file.hff')
    seg = SFFSegmentation('file.json')

The attributes (``name``, ``version``, etc.) are all instances of :py:class:`SFFAttribute`, which takes the name (first
positional argument) and an optional keyword argument ``sff_type`` denoting the class of the attribute. In the above
example, the ``software`` attribute will be of class :py:class:`SFFSoftware`.

This adapter API therefore specifies two main base classes from which all other classes are built upon:


.. automodule:: sfftkrw.schema.adapter
    :member-order: alphabetical

.. todo::

    Convert all ``camelCase`` arguments to ``underscore_case``

:py:class:`SFFSegmentation` class
=====================================

.. autoclass:: SFFSegmentation(name=None, software=None, primaryDescriptor=None, details=None, transformList=None, boundingBox=None, transforms=None, segments=None, lattices=None)
    :members:
    :show-inheritance:

:py:class:`Software` class
=====================================

.. autoclass:: SFFSoftware(name=None, version=None, processingDetails=None)
    :members:
    :show-inheritance:

:py:class:`SFFTransformList` class
==============================================

.. autoclass:: SFFTransformList()
    :members:
    :show-inheritance:

:py:class:`SFFTransformationMatrix` class
==============================================

.. autoclass:: SFFTransformationMatrix(id=None, rows=None, cols=None, data=None)
    :members:
    :show-inheritance:

:py:class:`SFFBoundingBox` class
=====================================

.. autoclass:: SFFBoundingBox(xmin=0.0, xmax=None, ymin=0.0, ymax=None, zmin=0.0, zmax=None)
    :members:
    :show-inheritance:

:py:class:`SFFGlobalExternalReferenceList` class
=======================================================

.. autoclass:: SFFGlobalExternalReferenceList()
    :members:
    :show-inheritance:

:py:class:`SFFExternalReferenceList` class
=======================================================

.. autoclass:: SFFExternalReferenceList()
    :members:
    :show-inheritance:

:py:class:`SFFExternalReference` class
==============================================

.. autoclass:: SFFExternalReference(id=None, type=None, otherType=None, value=None, label=None, description=None)
    :members:
    :show-inheritance:

:py:class:`SFFSegmentList` class
=====================================

.. autoclass:: SFFSegmentList()
    :members:
    :show-inheritance:

:py:class:`SFFSegment` class
=====================================

.. autoclass:: SFFSegment(id=None, biologicalAnnotation=None, colour=None, complexesAndMacromolecules=None, meshList=None, threeDVolume=None, shapePrimitiveList=None)
    :members:
    :show-inheritance:

:py:class:`SFFBiologicalAnnotation` class
==============================================

.. autoclass:: SFFBiologicalAnnotation(name=None, description=None, externalReferences=None)
    :members:
    :show-inheritance:

:py:class:`SFFRGBA` class
=====================================

.. autoclass:: SFFRGBA(red=None, green=None, blue=None, alpha=1.0, random_colour=False)
    :members:
    :show-inheritance:

:py:class:`SFFComplexesAndMacromolecules` class
=======================================================

.. autoclass:: SFFComplexesAndMacromolecules()
    :members:
    :show-inheritance:

:py:class:`SFFComplexList` class
=====================================

.. autoclass:: SFFComplexList()
    :members:
    :show-inheritance:

:py:class:`SFFMacromoleculeList` class
==============================================

.. autoclass:: SFFMacromoleculeList()
    :members:
    :show-inheritance:

:py:class:`SFFMeshList` class
=====================================

.. autoclass:: SFFMeshList()
    :members:
    :show-inheritance:

:py:class:`SFFMesh` class
=====================================

.. autoclass:: SFFMesh(id=None, vertexList=None, polygonList=None, transformId=None)
    :members:
    :show-inheritance:

:py:class:`SFFVertexList` class
=====================================

.. autoclass:: SFFVertexList()
    :members:
    :show-inheritance:

:py:class:`SFFVertex` class
=====================================

.. autoclass:: SFFVertex(vID=None, designation="surface", x=None, y=None, z=None)
    :members:
    :show-inheritance:

:py:class:`SFFPolygonList` class
=====================================

.. autoclass:: SFFPolygonList()
    :members:
    :show-inheritance:

:py:class:`SFFPolygon` class
=====================================

.. autoclass:: SFFPolygon(PID=None, v=None)
    :members:
    :show-inheritance:

:py:class:`SFFThreeDVolume` class
=====================================

.. autoclass:: SFFThreeDVolume(latticeId=None, value=None, transformId=None)
    :members:
    :show-inheritance:

:py:class:`SFFLatticeList` class
=====================================

.. autoclass:: SFFLatticeList()
    :members:
    :show-inheritance:

:py:class:`SFFLattice` class
=====================================

.. autoclass:: SFFLattice(id=None, mode=None, endianness=None, size=None, start=None, data=None)
    :members:
    :show-inheritance:

:py:class:`SFFVolumeStructure` class
==============================================

.. autoclass:: SFFVolumeStructure(cols=None, rows=None, sections=None)
    :members:
    :show-inheritance:

:py:class:`SFFVolumeIndex` class
=====================================

.. autoclass:: SFFVolumeIndex(cols=None, rows=None, sections=None)
    :members:
    :show-inheritance:

:py:class:`SFFShapePrimitiveList` class
==============================================

.. autoclass:: SFFShapePrimitiveList()
    :members:
    :show-inheritance:

:py:class:`SFFCone` class
=====================================

.. autoclass:: SFFCone(id=None, height=None, bottomRadius=None)
    :members:
    :show-inheritance:

:py:class:`SFFCuboid` class
=====================================

.. autoclass:: SFFCuboid(id=None, x=None, y=None, z=None)
    :members:
    :show-inheritance:

:py:class:`SFFCylinder` class
=====================================

.. autoclass:: SFFCylinder(id=None, height=None, diameter=None)
    :members:
    :show-inheritance:

:py:class:`SFFEllipsoid` class
=====================================

.. autoclass:: SFFEllipsoid(id=None, x=None, y=None, z=None)
    :members:
    :show-inheritance:

















